import platform
import subprocess
import os
import time
import socket   
import requests
import sys
import random
import string


def display_custom_commands():
    commands = {
        "encrypt": "Encrypt a given text using Caesar cipher.",
        "decrypt": "Decrypt a given text using Caesar cipher.",
        "listdir": "List the contents of a directory.",
        "changedir": "Change the current working directory.",
        "generatepassword": "Generate a random password.",
        "myip": "Display the computer's IP address.",
        "wifipassword": "Display the password of the connected WiFi network.",
        "internetspeed": "Check the internet download speed.",
        "clear": "Clear the terminal screen.",
        "systeminfo": "Display system information.",
        "createfile": "Create a new file.",
        "deletefile": "Delete a file.",
        "renamefile": "Rename a file.",
        "createdir": "Create a new directory.",
        "deletedir": "Delete a directory.",
        "readfile": "Read the contents of a file.",
        "writefile": "Write content to a file.",
        "appendfile": "Append content to a file.",
        "calculator": "Use a simple calculator.",
    }

    print("Custom Commands:")
    for command, description in commands.items():
        print(f"    {command:<15} {description}")
    print("")

def create_file(filename):
    try:
        with open(filename, 'w') as f:
            return f"File '{filename}' created successfully."
    except Exception as e:
        return f"An error occurred: {e}"

def delete_file(filename):
    try:
        os.remove(filename)
        return f"File '{filename}' deleted successfully."
    except FileNotFoundError:
        return "File not found."
    except Exception as e:
        return f"An error occurred: {e}"

def rename_file(old_name, new_name):
    try:
        os.rename(old_name, new_name)
        return f"File '{old_name}' renamed to '{new_name}'."
    except FileNotFoundError:
        return "File not found."
    except Exception as e:
        return f"An error occurred: {e}"

def create_directory(directory_name):
    try:
        os.mkdir(directory_name)
        return f"Directory '{directory_name}' created successfully."
    except FileExistsError:
        return "Directory already exists."
    except Exception as e:
        return f"An error occurred: {e}"

def delete_directory(directory_name):
    try:
        os.rmdir(directory_name)
        return f"Directory '{directory_name}' deleted successfully."
    except FileNotFoundError:
        return "Directory not found."
    except Exception as e:
        return f"An error occurred: {e}"

def read_file(filename):
    try:
        with open(filename, 'r') as f:
            content = f.read()
            return content
    except FileNotFoundError:
        return "File not found."
    except Exception as e:
        return f"An error occurred: {e}"

def write_file(filename, content):
    try:
        with open(filename, 'w') as f:
            f.write(content)
        return f"Content written to '{filename}' successfully."
    except Exception as e:
        return f"An error occurred: {e}"

def append_to_file(filename, content):
    try:
        with open(filename, 'a') as f:
            f.write(content)
        return f"Content appended to '{filename}' successfully."
    except Exception as e:
        return f"An error occurred: {e}"

def calculator():
    try:
        expression = input("Enter an arithmetic expression: ")
        result = eval(expression)
        return f"Result: {result}"
    except Exception as e:
        return f"An error occurred: {e}"

def list_directory_contents(directory="."):
    try:
        contents = os.listdir(directory)
        return "\n".join(contents)
    except FileNotFoundError:
        return "Directory not found."
    except Exception as e:
        return f"An error occurred: {e}"

def change_directory(new_directory):
    try:
        os.chdir(new_directory)
        return f"Changed directory to: {os.getcwd()}"
    except FileNotFoundError:
        return "Directory not found."
    except Exception as e:
        return f"An error occurred: {e}"

def generate_random_password(length=12, include_special=True):
    characters = string.ascii_letters + string.digits
    if include_special:
        characters += string.punctuation

    password = ''.join(random.choice(characters) for _ in range(length))
    return password

def clearterminal():
    if platform.system() == "Windows":
        os.system("cls")
    else:
        os.system("clear")

def caesar_encrypt(text, shift):
    encrypted_text = ""
    for char in text:
        if char.isalpha():
            ascii_offset = 65 if char.isupper() else 97
            encrypted_char = chr((ord(char) - ascii_offset + shift) % 26 + ascii_offset)
            encrypted_text += encrypted_char
        else:
            encrypted_text += char
    return encrypted_text

def caesar_decrypt(encrypted_text, shift):
    decrypted_text = ""
    for char in encrypted_text:
        if char.isalpha():
            ascii_offset = 65 if char.isupper() else 97
            decrypted_char = chr((ord(char) - ascii_offset - shift) % 26 + ascii_offset)
            decrypted_text += decrypted_char
        else:
            decrypted_text += char
    return decrypted_text

def systeminfo():
    system_info = platform.uname()
    print("System Information:")
    print(f"OS: {system_info.system} {system_info.release}")
    print(f"Machine: {system_info.machine}")
    print(f"Processor: {system_info.processor}")
    print("")

def check_for_new_version(current_version, latest_version):
    if latest_version == "Unknown":
        return False
    current_version_parts = [int(part) for part in current_version.split(".")]
    latest_version_parts = [int(part) for part in latest_version.split(".")]

    if current_version_parts < latest_version_parts:
        return True
    return False

def get_latest_version():
    response = requests.get("https://api.github.com/repos/tarrry/better-prompt/releases/latest")
    response_json = response.json()
    latest_version = response_json.get("tag_name", "Unknown")
    return latest_version

def get_connected_wifi_password():
    def get_connected_wifi_profile():
        profile_info = subprocess.check_output(['netsh', 'wlan', 'show', 'interface']).decode('utf-8').split('\n')
        connected_ssid = None
        for line in profile_info:
            if "SSID" in line:
                connected_ssid = line.split(":")[1].strip()
                break
        return connected_ssid
    
    connected_ssid = get_connected_wifi_profile()
    if connected_ssid:
        results = subprocess.check_output(['netsh', 'wlan', 'show', 'profile', connected_ssid, 'key=clear']).decode('utf-8').split('\n')
        password = [b.split(":")[1][1:-1] for b in results if "Key Content" in b]
        if password:
            return f"Connected WiFi SSID: {connected_ssid}\nPassword: {password[0]}"
        else:
            return "No password found for the connected WiFi network."
    else:
        return "No WiFi network is currently connected."

def check_internet_speed():
    temp_file_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'temp_file')
    download_url = "http://download.thinkbroadband.com/10MB.zip"
    start_time = time.time()
    response = requests.get(download_url)
    with open(temp_file_path, 'wb') as file:
        file.write(response.content)
    end_time = time.time()
    file_size = os.path.getsize(temp_file_path) / 1024 / 1024
    download_speed = file_size / (end_time - start_time)
    os.remove(temp_file_path)
    return download_speed

def get_computer_ip():
    hostname = socket.gethostname()
    IPAddr = socket.gethostbyname(hostname) 
    return f"Your Computer Name is: {hostname}\nYour Computer IP Address is: {IPAddr}"

def main():
    current_version = "1.3"  # Your current version
    latest_version = get_latest_version()

    if check_for_new_version(current_version, latest_version):
        print("There is a new version available!")
        print(f"Download it from: https://github.com/Tsuruta-Kurb/better-prompt/releases/tag/{latest_version}")

    while True:
        user_input = input("Better Prompt C:> ")

        if user_input.lower() == "exit":
            break
        
        elif user_input.lower() == "encrypt":
            plaintext = input("Enter the text to encrypt: ")
            shift = int(input("Enter the shift value: "))
            encrypted_text = caesar_encrypt(plaintext, shift)
            print(f"Encrypted text: {encrypted_text}\n")

        elif user_input.lower() == "decrypt":
            encrypted_text = input("Enter the encrypted text: ")
            shift = int(input("Enter the shift value: "))
            decrypted_text = caesar_decrypt(encrypted_text, shift)
            print(f"Decrypted text: {decrypted_text}\n")
        
        elif user_input.lower() == "listdir":
            directory = input("Enter the directory path (or press Enter for current directory): ")
            contents = list_directory_contents(directory)
            print(contents)
            print("")

        elif user_input.lower() == "changedir":
            new_directory = input("Enter the new directory path: ")
            result = change_directory(new_directory)
            print(result)
            print("")

        elif user_input.lower() == "generatepassword":
            password_length = int(input("Enter the desired password length: "))
            include_special = input("Include special characters? (y/n): ").lower() == "y"
    
            random_password = generate_random_password(password_length, include_special)
            print(f"Generated Password: {random_password}\n")

        elif user_input.lower() == "myip":
            print(get_computer_ip())
            print("")

        elif user_input.lower() == "wifipassword":
            wifi_info = get_connected_wifi_password()
            print(wifi_info)
            print("")

        elif user_input.lower() == "internetspeed":
            download_speed = check_internet_speed()
            print(f"Download speed: {download_speed:.2f} MBps")
            print("")

        elif user_input.lower() == "clear":
            clearterminal()
        
        elif user_input.lower() == "systeminfo":
            systeminfo()

        elif user_input.lower() == "wifipassword":
            wifi_info = get_connected_wifi_password()
            print(wifi_info)
            print("")

        elif user_input.lower() == "createfile":
            filename = input("Enter the filename: ")
            print(create_file(filename))
        
        elif user_input.lower() == "deletefile":
            filename = input("Enter the filename: ")
            print(delete_file(filename))
        
        elif user_input.lower() == "renamefile":
            old_name = input("Enter the old filename: ")
            new_name = input("Enter the new filename: ")
            print(rename_file(old_name, new_name))
        
        elif user_input.lower() == "createdir":
            directory_name = input("Enter the directory name: ")
            print(create_directory(directory_name))
        
        elif user_input.lower() == "deletedir":
            directory_name = input("Enter the directory name: ")
            print(delete_directory(directory_name))
        
        elif user_input.lower() == "readfile":
            filename = input("Enter the filename: ")
            print(read_file(filename))
        
        elif user_input.lower() == "writefile":
            filename = input("Enter the filename: ")
            content = input("Enter the content: ")
            print(write_file(filename, content))
        
        elif user_input.lower() == "appendfile":
            filename = input("Enter the filename: ")
            content = input("Enter the content: ")
            print(append_to_file(filename, content))
        
        elif user_input.lower() == "calculator":
            print(calculator())
        
        elif user_input.lower() == "chelp":
            display_custom_commands()

        else:
            try:
                process = subprocess.Popen(
                    user_input,
                    shell=True,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                    text=True
                )

                while process.poll() is None:
                    while True:
                        line = process.stdout.readline()
                        if not line:
                            break
                        print(line.strip())

                    while True:
                        line = process.stderr.readline()
                        if not line:
                            break
                        print(line.strip(), file=sys.stderr)

                stdout, stderr = process.communicate()
                print(stdout, end="")
                print(stderr, file=sys.stderr, end="")
            except subprocess.CalledProcessError as e:
                print("Error:", e)

if __name__ == "__main__":
    main()
